	;use two botton to present 0/1 to tell microcontroller the word first
	;then use an other botton to let controller send the word to ad9833
	;hope i'll know what words to send to get the wanted output

	;(OUTPUT) AD9833
	.EQU	SCLK, 90H	;P1.0
	.EQU	SDATA, 91H	;P1.1
	.EQU	FSYNC, 92H	;P1.2
	;(IN) BUTA FOR 0, BUTB FOR 1, BUTC FOR SEND
	.EQU	BUTA, 0A0H	;P2.0
	.EQU	BUTB, 0A1H	;P2.1
	.EQU	BUTC, 0A2H	;P2.2

	LJMP	MAIN
	.ORG	0BH
	LJMP	TIMER0

	.ORG	30H
	;MAIN: CONTINUE LOOKING AT P2.0-2.2, PROCESS INFO, SEND CMD TO AD9833
	;00H-02H INDICATE WHETHER THIS IS A REPETIVE COUNT
MAIN:	CLR	00H		;BUTA'S REAL CONDITION
	CLR	01H
	CLR	02H
	CLR	03H
	CLR	04H
	CLR	05H
 	;MOV	30H, #00H	;MAYBE 1H(A), 2H(B), 4H(C), WHO START THE TIMER
	MOV	TMOD, #01H	;TIMER0 MODE1
	MOV	IE, #82H	;TIMER0 INTERRUPT ENABLE
NEXT0:	JB	03H, NEXT1
	JNB	BUTA, A_LOW
	SETB	00H
NEXT1:	JB	04H, NEXT2
	JNB	BUTB, B_LOW
	SETB	01H
NEXT2:	JB	05H, NEXT0
	JNB	BUTC, C_LOW
	SETB	02H
	SJMP	NEXT0
A_LOW:	JNB	00H, NEXT1
	SETB	03H		;NOT LOOK AT P1.0
	MOV	30H, #01H	;BUTTON A START TIMER0
	MOV	TL0, #00H
	MOV	TH0, #0DCH	;ABOUT 10MS TO OVERFLOW
	SETB	TR0
	CLR	00H
	SJMP	NEXT1
B_LOW:	JNB	01H, NEXT2
	SETB	04H
	MOV	30H, #02H
	MOV	TL0, #00H
	MOV	TH0, #0DCH
	SETB	TR0
	CLR	01H
	SJMP	NEXT2
C_LOW:	JNB	02H, NEXT0
	SETB	05H
	MOV	30H, #04H
	MOV	TL0, #00H
	MOV	TH0, #0DCH
	SETB	TR0
	CLR	02H
	SJMP	NEXT0

	;TIMER0: INTERRUPT HANDLER, WHETHER BUTA/B/C REALLY GOES LOW
	;WHEN JUMP HERE, TF IS CLEARED
TIMER0:	CLR	TR0
	PUSH	0E0H	;ACC
	MOV	A, 30H
	CJNE	A, #01H, BC_TF
	CLR	03H	;LOOK AT P1.0
	JB	BUTA, A_FAKE
	CLR	00H
	CLR	C
	ACALL	PUTC
	SJMP	RETT0
A_FAKE:	SETB	00H
	SJMP	RETT0
BC_TF:	CJNE	A, #02H, C_TF
	CLR	04H
	JB	BUTB, B_FAKE
	CLR	01H
	SETB	C
	ACALL	PUTC
	SJMP	RETT0
B_FAKE:	SETB	01H
	SJMP	RETT0
C_TF:	CLR	05H
	JB	BUTC, C_FAKE
	CLR	02H
	ACALL	SENDW
	SJMP	RETT0
C_FAKE:	SETB	02H
RETT0:	POP	0E0H
	RETI

	;PUTC: PUT CARRY TO THE LEFTEST OF R7R6
PUTC:	MOV	A, R6
	RLC	A
	MOV	R6, A
	MOV	A, R7
	RLC	A
	MOV	R7, A
	RET

	;SENDW: SEND A 16-BIT WORD TO AD9833
 	;PARAM: THE WORD IS IN R7R6, R7.7 SHOULD FIRST BE SENT
SENDW:	CLR	FSYNC
	MOV	A, R7
	MOV	R5, #8
SHIFT1:	RLC	A
	MOV	SDATA, C
	CLR	SCLK
	SETB	SCLK
	DJNZ	R5, SHIFT1
	MOV	A, R6
	MOV	R5, #8
SHIFT2:	RLC	A
	MOV	SDATA, C
	CLR	SCLK
	SETB	SCLK
	DJNZ	R5, SHIFT2
	SETB	FSYNC
	RET

